#include <yarp/os/all.h>
#include "Settings.h"
#include <iostream>

// this is a very special case: our own editor
class MyEditor : public Settings::Editor {
public:
  virtual bool will_set_name() {
    std::cout << "About to set the name, it is currently " 
              << state().name << std::endl;
  }
  virtual bool did_set_name() {
    std::cout << "Just set the name, it is now " << state().name << std::endl;
  }
  
  // ... and so on ...
  virtual bool did_set_id() {
    std::cout << "just set id to " << state().id << std::endl;
  }
  
  virtual bool did_set_ints() {
    std::cout << "just set ints to " << state().ints << std::endl;
    // beautiful: the operator<< for std::vector<int_32> has been autogenerated
  }
};



int main() {
  yarp::os::Network yarp;   // bring up the yarp network
  yarp::os::Port port;      // we'll want a port
  Settings settings;
  
  // Either read automatically into settings ... 
  //port.setReader(settings);
  
  // ... or read via the standard editor ..
  //Settings::Editor editor(settings);  
  
  // ... or read via a custom editor ...
  MyEditor editor;
  editor.edit(settings);
  
  port.setReader(editor);
  
  port.setCallbackLock();   // allow automatic reads to be locked
  port.open("/settings");   // open port!
  while(true) {
    port.lockCallback();    // lock reads while we show settings
    printf("Settings %s\n", settings.toString().c_str());
    port.unlockCallback();  // unlock reads
    yarp::os::Time::delay(1);         // wait a little bit
  }
  return 0;
}
